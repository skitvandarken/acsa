name: üßπ Clean Deploy Angular App
on:
  push:
    branches:
      - mvp

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: üìå Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Angular App
        run: npm run build -- --configuration production
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: üßπ Nuclear Clean & Fresh Deploy
        env:
          WEBDISK_USERNAME: ${{ secrets.WEBDISK_USERNAME }}
          WEBDISK_PASSWORD: ${{ secrets.WEBDISK_PASSWORD }}
        run: |
          # ===== CONFIGURATION =====
          BUILD_DIR="dist/part/browser"
          WEBDISK_URL="https://angolacables.co.ao:2078"
          
          # Protected items (won't be touched)
          PROTECTED_ITEMS=(
            "cgi-bin"
            ".well-known"
            ".tmb"
            "partners.angolacables.co.ao"
            "old_angolacables.co.ao"
            "angular.angolacables.co.ao"
            "old2_angolacables.co.ao"
            "site_update"
            ".user.ini"
            ".htaccess_bak"
            "old_angolacables.co.ao.zip"
          )
          # =========================

          # üîê Verify WebDAV connection
          echo "üîê Testing WebDAV connection..."
          if ! curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --fail --silent --show-error >/dev/null; then
            echo "‚ùå FATAL: WebDAV authentication failed!"
            echo "‚ÑπÔ∏è Check your WEBDISK_USERNAME and WEBDISK_PASSWORD secrets"
            exit 1
          fi

          # üóëÔ∏è Get all remote items using XMLStarlet for proper XML parsing
          echo "üì° Fetching remote file list..."
          if ! command -v xmlstarlet &>/dev/null; then
            sudo apt-get update && sudo apt-get install -y xmlstarlet
          fi

          REMOTE_ITEMS=$(curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --silent --show-error | \
            xmlstarlet sel -t -v "//a:href" -n | \
            sed "s|$WEBDISK_URL||" | \
            sed 's|^/||' | \
            grep -v '^$' | \
            sort -ur)

          echo "üõ°Ô∏è PROTECTED ITEMS:"
          printf " - %s\n" "${PROTECTED_ITEMS[@]}"

          # üí£ Delete everything except protected items
          echo "üßπ Starting aggressive cleanup..."
          for item in $REMOTE_ITEMS; do
            # Skip empty items
            [[ -z "$item" ]] && continue
            
            # Check if item is protected
            protected=false
            for protected_item in "${PROTECTED_ITEMS[@]}"; do
              if [[ "$item" == "$protected_item"* ]]; then
                protected=true
                break
              fi
            done

            if [ "$protected" = false ]; then
              echo "üóëÔ∏è Deleting: $item"
              if ! curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X DELETE "$WEBDISK_URL/$item" --silent --show-error --fail; then
                echo "‚ö†Ô∏è Failed to delete $item (may not exist or is non-empty)"
                # Try deleting as directory if file delete failed
                curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X DELETE "$WEBDISK_URL/$item/" --silent --show-error --fail || true
              fi
            else
              echo "üõ°Ô∏è Preserving: $item"
            fi
          done

          # üöÄ Deploy fresh build
          echo "üöÄ Deploying new version..."
          find $BUILD_DIR -type f | while read -r file; do
            remote_path="${file#$BUILD_DIR/}"
            remote_dir=$(dirname "$remote_path")
            
            # Create directory structure if needed
            if [[ "$remote_dir" != "." ]]; then
              if ! curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X MKCOL "$WEBDISK_URL/$remote_dir" --silent --show-error --fail >/dev/null 2>&1; then
                echo "üìÅ Directory exists: $remote_dir"
              fi
            fi
            
            # Upload with retry logic
            MAX_RETRIES=3
            attempt=1
            while [ $attempt -le $MAX_RETRIES ]; do
              echo "‚¨ÜÔ∏è Uploading [$attempt/$MAX_RETRIES]: $remote_path"
              if curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -T "$file" "$WEBDISK_URL/$remote_path" --silent --show-error --fail; then
                echo "‚úÖ Upload succeeded"
                break
              else
                if [ $attempt -eq $MAX_RETRIES ]; then
                  echo "‚ùå FATAL: Failed to upload $remote_path after $MAX_RETRIES attempts"
                  exit 1
                fi
                sleep $((attempt * 2))  # Exponential backoff
                ((attempt++))
              fi
            done
          done

          echo "üéâ Deployment completed successfully!"
          echo "üåê Site should now be live at: https://angolacables.co.ao"
