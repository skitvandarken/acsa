name: üßπ Clean Deploy Angular App
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v3

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: üìå Install Dependencies
        run: npm ci

      - name: üèóÔ∏è Build Angular App
        run: npm run build -- --configuration production
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"

      - name: üß® Nuclear Clean & Deploy
        env:
          WEBDISK_USERNAME: ${{ secrets.WEBDISK_USERNAME }}
          WEBDISK_PASSWORD: ${{ secrets.WEBDISK_PASSWORD }}
        run: |
          # ===== CONFIGURATION =====
          BUILD_DIR="dist/part/browser"
          WEBDISK_URL="https://angolacables.co.ao:2078"
          
          # Protected items (won't be touched)
          EXCLUDE_LIST=(
            "cgi-bin"
            ".well-known"
            ".tmb"
            "partners.angolacables.co.ao"
            "old_angolacables.co.ao"
            "angular.angolacables.co.ao"
            "old2_angolacables.co.ao"
            "site_update"
            ".user.ini"
            ".htaccess_bak"
            "old_angolacables.co.ao.zip"
          )
          # =========================

          echo "üîê Testing WebDAV connection..."
          curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --fail --silent --show-error || {
            echo "‚ùå WebDAV authentication failed!";
            exit 1;
          }

          echo "üí£ Starting aggressive cleanup..."
          ITEMS_TO_DELETE=$(curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X PROPFIND $WEBDISK_URL/ --silent | \
            xmllint --xpath "//d:response/d:href/text()" - 2>/dev/null | \
            sed "s|$WEBDISK_URL/||" | \
            grep -v "^$")

          echo "üõ°Ô∏è Protected items:"
          printf " - %s\n" "${EXCLUDE_LIST[@]}"

          while IFS= read -r item; do
            # Skip root directory
            [[ -z "$item" ]] && continue
            
            # Check protection status
            protected=false
            for protected_item in "${EXCLUDE_LIST[@]}"; do
              if [[ "$item" == "$protected_item"* ]]; then
                protected=true
                break
              fi
            done

            if [ "$protected" = false ]; then
              echo "üßπ Deleting: $item"
              curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X DELETE "$WEBDISK_URL/$item" --silent --show-error --fail
            else
              echo "üõ°Ô∏è Preserving: $item"
            fi
          done <<< "$ITEMS_TO_DELETE"

          echo "üöÄ Deploying fresh build..."
          find $BUILD_DIR -type f | while read -r file; do
            remote_path="${file#$BUILD_DIR/}"
            remote_dir=$(dirname "$remote_path")
            
            # Create directory structure
            if ! curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -X MKCOL "$WEBDISK_URL/$remote_dir" --silent --show-error --fail >/dev/null 2>&1; then
              echo "üìÅ Directory exists: $remote_dir"
            fi
            
            echo "‚¨ÜÔ∏è Uploading: $remote_path"
            curl -u $WEBDISK_USERNAME:$WEBDISK_PASSWORD -T "$file" "$WEBDISK_URL/$remote_path" --silent --show-error --fail
          done

          echo "üéâ Clean deploy completed successfully!"
